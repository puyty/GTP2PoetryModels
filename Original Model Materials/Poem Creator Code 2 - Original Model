import torch
import random
from transformers import GPT2LMHeadModel, GPT2Tokenizer

model_path = "/Users/sean/Downloads/gmodel1"

# Load the model and tokenizer
model = GPT2LMHeadModel.from_pretrained(model_path)
tokenizer = GPT2Tokenizer.from_pretrained(model_path)

# Set the device to use
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# User input for the starting word of the poem
starting_word = input("Enter the starting word of the poem: ")

# Set the number of lines
num_lines = 14

# Initialize the poem and prompt
poem = ""
input_prompt = starting_word
used_words = {starting_word}

# Function to process and add new line to the poem
def process_line(line):
    words = line.split()
    cleaned_words = []
    for word in words:
        if word not in used_words and word.isalpha():
            cleaned_words.append(word)
            used_words.add(word)
    return ' '.join(cleaned_words)

for _ in range(num_lines):
    print(f"Working on line {_ + 1}")

    while True:
        output = model.generate(
            tokenizer.encode(input_prompt, return_tensors="pt").to(device),
            max_length=30,
            num_return_sequences=1,
            pad_token_id=tokenizer.eos_token_id,
            do_sample=True,
            top_k=0,
            top_p=0.85,
            temperature=0.8,
            repetition_penalty=1.2,
        )
        generated_text = tokenizer.decode(output[0], skip_special_tokens=True)
        generated_lines = generated_text.split('\n')

        # Process each generated line
        for line in generated_lines:
            processed_line = process_line(line)
            if len(processed_line.split()) >= 5 and len(processed_line.split()) <= 10:
                poem += processed_line + '\n'
                input_prompt = processed_line.split()[-1]
                break
        else:
            continue
        break

# Print the composed poem
print("\nPoem:")
print(poem)
